import React, { useState, useEffect, useRef, useContext } from "react";
import axios from "axios";
import Message from "../Message/Message";
import "./ChatWindow.css";
import { AuthContext } from "../AuthProvider";

const ChatWindow = () => {
  const { user, logout } = useContext(AuthContext);
  const [sessions, setSessions] = useState([]);
  const [currentSession, setCurrentSession] = useState(null);
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [isBotTyping, setIsBotTyping] = useState(false);
  const chatHistoryRef = useRef(null);

  useEffect(() => {
    const fetchChatHistory = async () => {
      try {
        const response = await axios.get("http://127.0.0.1:8000/api/chat-history/", {
          headers: { Authorization: `Bearer ${localStorage.getItem("access_token")}` },
        });
        setSessions(response.data.reverse());
        if (response.data.length > 0) {
          setCurrentSession(response.data[0]);
          setMessages(response.data[0].messages || []);
        }
      } catch (error) {
        console.error("Error fetching chat history:", error);
        if (error.response && error.response.status === 401) {
          logout();
        }
      }
    };
    if (user) fetchChatHistory();
  }, [user, logout]);

  const handleSend = async () => {
    if (!input.trim()) return;

    const userMessage = { text: input, sender: "user" };
    const updatedMessages = [...messages, userMessage];
    setMessages(updatedMessages);
    setInput("");
    setIsBotTyping(true);

    try {
      const response = await axios.post(
        "http://127.0.0.1:8000/api/chatbot/",
        { message: input },
        { headers: { Authorization: `Bearer ${localStorage.getItem("access_token")}` } }
      );
      const botMessage = { text: response.data.response, sender: "bot" };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      console.error("Error sending message:", error);
    } finally {
      setIsBotTyping(false);
    }
  };

  const startNewSession = () => {
    const newSession = { id: Date.now(), messages: [] };
    setSessions([newSession, ...sessions]);
    setCurrentSession(newSession);
    setMessages([]);
  };

  const loadSession = (session) => {
    setCurrentSession(session);
    setMessages(session.messages || []);
  };

  useEffect(() => {
    if (chatHistoryRef.current) {
      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;
    }
  }, [messages]);

  return (
    <div className="chat-container">
      <div className="chat-sidebar">
        <h3>Chat Sessions</h3>
        <button onClick={startNewSession}>New Chat</button>
        <ul>
          {sessions.map((session, index) => (
            <li key={index} className={session === currentSession ? "active" : ""} onClick={() => loadSession(session)}>
              Chat {index + 1}
            </li>
          ))}
        </ul>
      </div>
      <div className="chat-window">
        <div className="chat-history" ref={chatHistoryRef}>
          {messages.map((msg, index) => (
            <Message key={index} text={msg.text} sender={msg.sender} />
          ))}
          {isBotTyping && (
            <div className="message bot typing-indicator">
              <span>.</span>
              <span>.</span>
              <span>.</span>
            </div>
          )}
        </div>
        <div className="chat-input">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Type a message..."
            onKeyPress={(e) => e.key === "Enter" && handleSend()}
          />
          <button onClick={handleSend}>Send</button>
        </div>
      </div>
    </div>
  );
};

export default ChatWindow;